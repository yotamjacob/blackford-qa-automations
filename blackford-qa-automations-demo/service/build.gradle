buildscript {
    ext.deps = [
            log4jVersion     : "2.20.0",
            micrometerVersion: "1.10.6",
            springBootVersion: "3.1.0",
    ]
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id "io.freefair.lombok" version "8.0.1"
    id "org.sonarqube" version "4.0.0.2929"
    id 'jacoco'
    id 'maven-publish'
}

repositories {
    maven { url "https://nexus.zebra-med.com/repository/maven-central/" }
    maven { url "https://nexus.zebra-med.com/repository/maven-releases/" }
    maven {
        url = "https://repository.aspose.com/repo/"
        allowInsecureProtocol = true
    }
}

group = 'com.nanoxai'
version = rootProject.file('VERSION').text.trim()
sourceCompatibility = '17'

sourceSets {
    test {
        java {
            srcDir 'src/main'
        }
    }
}

dependencies {

    implementation 'org.awaitility:awaitility:4.2.0'
    implementation 'com.epages:wiremock-spring-boot-starter:0.8.5'
    implementation 'io.github.ricall.junit5-wiremock:junit5-wiremock:2.0.0'
    configurations {
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        all*.exclude group: "ch.qos.logback"
        all*.exclude group: "org.slf4j", module: "log4j-to-slf4j" // allow using log4j 2.x
        all*.exclude group: "org.slf4j", module: "slf4j-simple"     // log4j is the configured backend
        all*.exclude group: "org.slf4j", module: "slf4j-log4j12"    // from dcm4che-core
        testCompile.exclude group: "org.springframework.cloud", module: "spring-cloud-starter-vault-com.nanoxai.marketplace.tests.config"
        all*.exclude group: 'org.eclipse.jetty'
    }

    // Logging
    implementation "org.apache.logging.log4j:log4j-api:${deps.log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${deps.log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-web:${deps.log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-jcl:${deps.log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${deps.log4jVersion}"
    // send all slf4j events to log4j 2.x
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl', version: "${deps.log4jVersion}"

    // Spring
    implementation "org.springframework.boot:spring-boot-starter-actuator:${deps.springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-integration:${deps.springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${deps.springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-validation:${deps.springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-jetty:${deps.springBootVersion}"

    // validation
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //kubernetes
    implementation group: 'io.fabric8', name: 'kubernetes-client', version: '6.6.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'
    implementation 'commons-codec:commons-codec:1.16.0'
    implementation 'org.apache.commons:commons-compress:1.25.0'

    //yaml
    implementation group: 'commons-io', name: 'commons-io', version: '2.12.0'

    // Java test
    implementation "org.hamcrest:hamcrest-all:1.3"
    implementation "org.mockito:mockito-core:3.1.0"
    implementation "junit:junit"
    implementation "org.springframework.boot:spring-boot-starter-test:${deps.springBootVersion}"

    //Cucumber
    implementation "io.cucumber:cucumber-java:6.4.0"
    implementation "io.cucumber:cucumber-junit:6.4.0"
    implementation "io.cucumber:cucumber-spring:6.4.0"

    //Wiremock standAlone
    implementation "com.github.tomakehurst:wiremock-jre8-standalone:2.35.0"

    // Dicom
    implementation 'com.aspose:aspose-imaging:20.10:jdk16'
}


sonarqube {
    properties {
        property "sonar.qualitygate.wait", true
        property 'sonar.exclusions', "**/entities/**," +
                "**/models/**"}
}

bootJar.baseName = rootProject.name
tasks.named('bootJar') {
    archivesBaseName = rootProject.name
    manifest {
        attributes('Implementation-Title': rootProject.name,
                'Implementation-Version': rootProject.version)
    }
}

publishing {
    publications {
        marketplaceAlgorithmAdapter(MavenPublication) {
            artifact bootJar
            artifactId bootJar.baseName
        }
    }
    repositories {
        maven {
            url "http://nexus.zebra-med.com/repository/" + "${System.env.REPO}"
            allowInsecureProtocol = true
            credentials {
                username = "${System.env.NEXUS_USERNAME}"
                password = "${System.env.NEXUS_PASSWORD}"
            }
        }
    }
}

test {
    if (project.hasProperty('args')) {
        project.args.split(',').each {
            def (key, value) = it.replaceFirst('--', "").split('=')
            systemProperty((String) key, (String) value)
        }
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError", "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true
    }
}

task testCcs(type: Test) {
    systemProperty 'spring.profiles.active', 'ccs'
    include '**/CcsTestRunner.class'
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError", "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true
    }
}

task testOst(type: Test) {
    systemProperty 'spring.profiles.active', 'ost'
    include '**/OstTestRunner.class'
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError", "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true
    }
}